--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.12
-- Dumped by pg_dump version 11.1

-- Started on 2019-03-10 23:38:47

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 201 (class 1255 OID 32943)
-- Name: reserve(text, text, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.reserve(user_token text, product_name text, reserve_count numeric) RETURNS text
    LANGUAGE plpgsql
    AS $$
 declare vendor text; 
 declare have_count numeric;
 declare have_reserve numeric;
 declare user_id numeric;
 declare product_id numeric;
 declare reserve_id numeric;
 
 BEGIN
 SELECT free_count, "id" INTO have_count, product_id from public.products where "name" = product_name FOR UPDATE;
 	if(have_count < reserve_count) then RETURN('out of stock');	 
	else
		UPDATE public.products SET free_count=(have_count - reserve_count) WHERE "id" = product_id;
		user_id := (select "id" from public.user where "token" = user_token LIMIT 1);
		SELECT "id", count_reserve INTO reserve_id, have_reserve from public.reserves where(id_product = product_id and id_user = user_id);
		if have_reserve > 0 then 
			UPDATE public.reserves SET count_reserve=(have_reserve + reserve_count) WHERE "id" = reserve_id;
			Commit;
			RETURN ('sucsess update');
		else
			INSERT INTO public.reserves(id_product, id_user, count_reserve)VALUES (product_id, user_id, reserve_count);
			Commit;
			RETURN('sucsess insert');
		end if;
		Rollback;
		RETURN('failure, trouble with reserves table');
	end if;
	Rollback;
   RETURN('failure, trouble with product table');
   END;
 $$;


ALTER FUNCTION public.reserve(user_token text, product_name text, reserve_count numeric) OWNER TO postgres;

--
-- TOC entry 202 (class 1255 OID 32944)
-- Name: unreserve(text, text, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.unreserve(user_token text, product_name text, unreserve_count numeric) RETURNS text
    LANGUAGE plpgsql
    AS $$
 declare vendor text; 
 declare have_count numeric;
 declare reserve_count numeric;
 declare user_id numeric;
 declare product_id numeric;
 declare reserve_id numeric;
 
 BEGIN
 SELECT "id" INTO product_id FROM public.products WHERE "name" = product_name LIMIT 1;
 SELECT "id" FROM public.user WHERE "token" = user_token LIMIT 1;
 SELECT "id", count_reserve INTO reserve_id, reserve_count FROM public.products WHERE id_product = product_name AND id_user = user_id FOR UPDATE LIMIT 1;
 if (count_reserve < unreserve_count) OR (unreserve_count is Null) then 
 DELETE FROM public.reserves WHERE "id" = reserve_id; 	
 Commit;
 RETURN ('sucsess delete');
 else
 UPDATE public.reserves SET count_reserve = (count_reserve - unreserve_count) WHERE "id" = reserve_id;
 Commit;
 RETURN ('sucsess update');
 end if;
 END;
 $$;


ALTER FUNCTION public.unreserve(user_token text, product_name text, unreserve_count numeric) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 186 (class 1259 OID 32845)
-- Name: products; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.products (
    id numeric NOT NULL,
    name text NOT NULL,
    free_count numeric NOT NULL,
    price money NOT NULL
);


ALTER TABLE public.products OWNER TO postgres;

--
-- TOC entry 188 (class 1259 OID 32912)
-- Name: reserves; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reserves (
    id integer NOT NULL,
    id_product numeric,
    id_user numeric,
    count_reserve numeric NOT NULL
);


ALTER TABLE public.reserves OWNER TO postgres;

--
-- TOC entry 187 (class 1259 OID 32910)
-- Name: reserve_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.reserve_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reserve_id_seq OWNER TO postgres;

--
-- TOC entry 2149 (class 0 OID 0)
-- Dependencies: 187
-- Name: reserve_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.reserve_id_seq OWNED BY public.reserves.id;


--
-- TOC entry 185 (class 1259 OID 32839)
-- Name: user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."user" (
    id numeric(4,0) NOT NULL,
    name text NOT NULL,
    login text,
    password text,
    token text
);


ALTER TABLE public."user" OWNER TO postgres;

--
-- TOC entry 2014 (class 2604 OID 32915)
-- Name: reserves id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reserves ALTER COLUMN id SET DEFAULT nextval('public.reserve_id_seq'::regclass);


--
-- TOC entry 2141 (class 0 OID 32845)
-- Dependencies: 186
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.products (id, name, free_count, price) FROM stdin;
1	Notebook	1000	1Â 000,00 ?
0	Table	100	300,00 ?
\.


--
-- TOC entry 2143 (class 0 OID 32912)
-- Dependencies: 188
-- Data for Name: reserves; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.reserves (id, id_product, id_user, count_reserve) FROM stdin;
\.


--
-- TOC entry 2140 (class 0 OID 32839)
-- Dependencies: 185
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."user" (id, name, login, password, token) FROM stdin;
0	Alexey	leha999	lehagod	qazWSX1
1	Andrey	dron999	drongod	qazWSX2
2	Andrey	dron9991\n	drongod	qazWSX3
3	Andrey	dron9992	drongod	qazWSX4
4	Andrey	dron9993	drongod	qazWSX5
5	Andrey	dron9994	drongod	qazWSX6
6	Andrey	dron9995	drongod	qazWSX7
7	Andrey	dron9996	drongod	qazWSX8
8	Andrey	dron9997	drongod	qazWSX9
9	Andrey	dron9998	drongod	qazWSX10
\.


--
-- TOC entry 2150 (class 0 OID 0)
-- Dependencies: 187
-- Name: reserve_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.reserve_id_seq', 449, true);


--
-- TOC entry 2020 (class 2606 OID 32920)
-- Name: reserves Booking_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reserves
    ADD CONSTRAINT "Booking_pkey" PRIMARY KEY (id);


--
-- TOC entry 2018 (class 2606 OID 32852)
-- Name: products Products_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT "Products_pkey" PRIMARY KEY (id);


--
-- TOC entry 2016 (class 2606 OID 32869)
-- Name: user User_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY (id);


--
-- TOC entry 2021 (class 2606 OID 32921)
-- Name: reserves id_products; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reserves
    ADD CONSTRAINT id_products FOREIGN KEY (id_product) REFERENCES public.products(id);


--
-- TOC entry 2022 (class 2606 OID 32926)
-- Name: reserves id_user; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reserves
    ADD CONSTRAINT id_user FOREIGN KEY (id_user) REFERENCES public."user"(id);


-- Completed on 2019-03-10 23:38:47

--
-- PostgreSQL database dump complete
--

